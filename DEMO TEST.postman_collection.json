{
	"info": {
		"_postman_id": "50abb05e-3566-40b7-9ff7-05131babdc1c",
		"name": "DEMO TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20596190"
	},
	"item": [
		{
			"name": "Board",
			"item": [
				{
					"name": "Create a board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the app displays board name correctly\", function () {",
									"pm.expect(jsonResponse.name).to.eql(pm.environment.get('boardName'));",
									"});",
									"",
									"pm.test(\"Verify the board is private\", function () {",
									"pm.expect(jsonResponse.prefs.permissionLevel).to.eql(\"private\");",
									"});",
									"",
									"//pm.globals.set(\"boardId\", jsonResponse.id); // set global variable",
									"pm.environment.set(\"boardId\", jsonResponse.id); //set environment variable example",
									"",
									"console.log(jsonResponse.prefs)",
									"console.log(pm.environment.get('trelloKey'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"boardName\",getRandomBoardName());",
									"",
									"//Create a random name for Board",
									"function getRandomBoardName(){",
									"    const boardName = \"My New Board-\" + parseInt( Math.random()*10000)",
									"    return boardName;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}&defaultLists=false",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "defaultLists",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the color is updated correctly\", function () {",
									"pm.expect(jsonResponse.prefs.background).to.eql(\"red\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}&name={{boardName}}&prefs/background=red",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "prefs/background",
									"value": "red"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{boardId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Status code is 404 after deletes\", function () {",
									"    pm.response.to.have.status(404);",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{boardId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List",
			"item": [
				{
					"name": "Create a DONE List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the name of the list is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"listName\"));",
									"});",
									"",
									"pm.test(\"Verify the list is open\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.closed).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verify the list was created inside the board\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idBoard).to.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"pm.environment.set(\"listId\", jsonResponse.id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"listName\",getRandomListName());",
									"",
									"//random name",
									"function getRandomListName(){",
									"    const listName = \"List -\" + parseInt( Math.random()*10000)",
									"    return listName;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:id/lists?name={{listName}}&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":id",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{listName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{boardId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a DONE List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the name of the list is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"listName\"));",
									"});",
									"",
									"pm.test(\"Verify the list is open\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.closed).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verify the list was created inside the board\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idBoard).to.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"pm.environment.set(\"listId\", jsonResponse.id);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"listName\",getRandomListName());",
									"",
									"function getRandomListName(){",
									"    const listName = \"List-New-\" + parseInt( Math.random()*10000)",
									"    return listName;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists/:id?key={{trelloKey}}&token={{trelloToken}}&name={{listName}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "name",
									"value": "{{listName}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{listId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a LIST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Status code is 404 after deletes\", function () {",
									"    pm.response.to.have.status(404);",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists/:id?key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{listId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card",
			"item": [
				{
					"name": "Create a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the name of the card is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"cardName\"));",
									"});",
									"",
									"",
									"pm.test(\"Verify the card is open\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.closed).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verify the card was created in the correct List\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idList).to.eql(pm.environment.get(\"listId\"));",
									"});",
									"",
									"pm.test(\"Verify the card was created in the correct Board\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.idBoard).to.eql(pm.environment.get(\"boardId\"));",
									"});",
									"",
									"pm.test(\"Verify the card has no votes or attachments\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.attachments).to.eql([]);",
									"    pm.expect(jsonData.badges.votes).to.eql(0);",
									"",
									"});",
									"pm.environment.set(\"CardId\", jsonResponse.id);",
									"/*",
									"pm.environment.unset(\"boardName\");",
									"pm.environment.unset(\"boardId\");",
									"pm.environment.unset(\"listName\");",
									"pm.environment.unset(\"listId\");",
									"pm.environment.unset(\"cardName\");",
									"*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cardName\",getRandomCardName());",
									"",
									"function getRandomCardName(){",
									"    const cardName = \"Learn Postman-\" + parseInt( Math.random()*10000)",
									"    return cardName;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/cards?idList={{listId}}&key={{trelloKey}}&token={{trelloToken}}&name={{cardName}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{listId}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "name",
									"value": "{{cardName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the card name is updated correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"cardName\"));",
									"});",
									"/*",
									"pm.environment.unset(\"boardName\");",
									"pm.environment.unset(\"boardId\");",
									"pm.environment.unset(\"listName\");",
									"pm.environment.unset(\"listId\");",
									"pm.environment.unset(\"cardName\");",
									"pm.environment.unset(\"CardId\");*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"cardName\",getRandomCardName());",
									"",
									"function getRandomCardName(){",
									"    const cardName = \"Learn Postman-New-\" + parseInt( Math.random()*10000)",
									"    return cardName;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&idList={{listId}}&name={{cardName}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "idList",
									"value": "{{listId}}"
								},
								{
									"key": "name",
									"value": "{{cardName}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{CardId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Status code is 404 after deletes\", function () {",
									"    pm.response.to.have.status(404);",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"cards",
								":id"
							],
							"query": [
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{CardId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200 on Card\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify Card is not present after delete\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.limits).to.eql({});",
							"     //pm.expect(jsonData[0].name, 'Name is not available').to.be.undefined;",
							"});",
							"",
							"pm.environment.unset(\"cardName\");",
							"pm.environment.unset(\"CardId\");",
							"//CardId"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{CardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify returns null after delete a Board\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData._value).to.eql(null);",
							"});",
							"",
							"pm.environment.unset(\"boardName\");",
							"pm.environment.unset(\"boardId\");",
							"pm.environment.unset(\"listName\");",
							"pm.environment.unset(\"listId\");",
							"",
							"//CardId"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "key",
			"value": "ADD HERE YOUR KEY",
			"type": "string"
		},
		{
			"key": "token",
			"value": "ADD HERE YOUR TOKEN",
			"type": "string"
		}
	]
}